// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using temp.Entity;

#nullable disable

namespace temp.Migrations
{
    [DbContext(typeof(RegnaDb))]
    partial class RegnaDbModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.7");

            modelBuilder.Entity("temp.Entity.DataCard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Tags")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Visibility")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("DataCards");
                });

            modelBuilder.Entity("temp.Entity.Embedding", b =>
                {
                    b.Property<int>("CardId")
                        .HasColumnType("INTEGER");

                    b.Property<byte[]>("Vector")
                        .IsRequired()
                        .HasColumnType("BLOB");

                    b.HasKey("CardId");

                    b.ToTable("Embeddings");
                });

            modelBuilder.Entity("temp.Entity.Embedding", b =>
                {
                    b.HasOne("temp.Entity.DataCard", "Card")
                        .WithOne("Embedding")
                        .HasForeignKey("temp.Entity.Embedding", "CardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Card");
                });

            modelBuilder.Entity("temp.Entity.DataCard", b =>
                {
                    b.Navigation("Embedding")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
